{"id":2416,"date":"2018-10-01T09:56:52","date_gmt":"2018-10-01T09:56:52","guid":{"rendered":"https:\/\/applicature.com\/?p=2416"},"modified":"2022-01-11T20:25:26","modified_gmt":"2022-01-11T20:25:26","slug":"ethereum-programming-tutorial","status":"publish","type":"post","link":"https:\/\/applicature.com\/blog\/blockchain-technology\/ethereum-programming-tutorial","title":{"rendered":"Ethereum Programming Basics"},"content":{"rendered":"<p>Ethereum is a multi-purpose platform designed to solve a number of tasks. In the following article, we will outline the basics of Ethereum programming, its functionality, and its features. Below, you will find an Ethereum programming tutorial explaining the easy steps of smart-contract and DApp deployment.<\/p>\n<p>The Ethereum platform is a creation of Vitalik Buterin. Its intention is to provide an alternative platform to the existing Bitcoin blockchain in order to:<\/p>\n<ul>\n<li>build DApps (decentralized applications)<\/li>\n<li>provide a new set of tradeoffs matching a variety of dApps<\/li>\n<li>increase the speed of deployment<\/li>\n<li>ensure higher security, even for small and rarely-used applications<\/li>\n<li>advance efficient interactions<\/li>\n<\/ul>\n<p>To provide these solutions, Ethereum has built an ultimate basic layer. This is a new blockchain with a native Turing-complete coding language. It enables developers and programmers to write smart contracts for numerous decentralized applications. One can easily set unique arbitral ownership rules and conditions as well as a variety of transaction modes and state functions.<\/p>\n<p>Ethereum provides greater capacity than offered by Bitcoin. Hence, with Ethereum implementation, one can build and execute currency and reputation system protocols in various ways. In addition, developers can create smart contracts on top of the Ethereum platform. Due to the platform&#8217;s capacity, SCs can contain a particular value, and can be executed only under precise conditions. Additional power is provided by:<\/p>\n<ul>\n<li>Turing-complete coding<\/li>\n<li>value perception<\/li>\n<li>blockchain recognition<\/li>\n<li>state<\/li>\n<\/ul>\n<p>Ethereum is currently solving a range of problems, while Bitcoin originally emerged as a digital cryptocurrency only.<\/p>\n<p><img loading=\"lazy\" class=\"aligncenter size-full wp-image-2417\" src=\"https:\/\/applicature.com\/wp-content\/uploads\/2018\/09\/Ethereum-programming-tutorial-Ethereum-vs-Bitcoin.jpg\" alt=\"Ethereum vs. Bitcoin comparison\" width=\"999\" height=\"1904\" srcset=\"https:\/\/applicature.com\/wp-content\/uploads\/2018\/09\/Ethereum-programming-tutorial-Ethereum-vs-Bitcoin.jpg 537w, https:\/\/applicature.com\/wp-content\/uploads\/2018\/09\/Ethereum-programming-tutorial-Ethereum-vs-Bitcoin-58x110.jpg 58w, https:\/\/applicature.com\/wp-content\/uploads\/2018\/09\/Ethereum-programming-tutorial-Ethereum-vs-Bitcoin-184x350.jpg 184w, https:\/\/applicature.com\/wp-content\/uploads\/2018\/09\/Ethereum-programming-tutorial-Ethereum-vs-Bitcoin-262x500.jpg 262w, https:\/\/applicature.com\/wp-content\/uploads\/2018\/09\/Ethereum-programming-tutorial-Ethereum-vs-Bitcoin-63x120.jpg 63w, https:\/\/applicature.com\/wp-content\/uploads\/2018\/09\/Ethereum-programming-tutorial-Ethereum-vs-Bitcoin-157x300.jpg 157w\" sizes=\"(max-width: 999px) 100vw, 999px\" \/><\/p>\n<h2>Ethereum Functionality<\/h2>\n<p>Ethereum functions according to the following principles:<\/p>\n<p><strong>1. Simplicity.<\/strong> One of Ethereum\u2019s distinctive features is protocol simplicity. It is very simple and convenient to use by any programmer. Ideally, any developer can implement the protocol and realize its full potential according to specification. In order to avoid complexity, one should not add certain optimizations unless absolutely necessary.<\/p>\n<p><strong>2. Universality.<\/strong> Another Ethereum trait is that it doesn\u2019t have specific \u201cfeatures.\u201d Instead, the platform functions on a native Turing-complete coding language. Any developer can use this language to write smart contracts and mathematically define all types of transactions. With Ethereum, one can create his\/her own cryptocurrency, use it in smart contracts, set up scalable platforms and applications, etc.<\/p>\n<p><strong>3. Modularity.<\/strong> Ethereum protocol can be divided into multiple parts and modules. During the development process, the user is able to design a program and submit further modifications. It is significant that even with changes and edits, the application stack will continue functioning. This is beneficial for various upgrades, innovations, etc.<\/p>\n<p><strong>4. Agility.<\/strong> Ethereum protocol is fast and flexible, as its requirements aren\u2019t set in stone. Keep in mind, though, that Ethereum is strict about relatively high-level construct modifications. If any modifications occur during testing that can further increase the protocol\u2019s scalability or security issues, Ethereum elaborates on them.<\/p>\n<p><strong>5. Non-discrimination and non-censorship.<\/strong> Ethereum protocol doesn\u2019t commonly place any restrictions or usage limitations. The regulatory mechanisms are meant to support various applications as long as they are not harmful.<\/p>\n<p>In the basics section, we outline the general workflow during Ethereum programming. Let\u2019s consider the main features and components:<\/p>\n<h3>Cryptography<\/h3>\n<p>Public-key cryptography is one of Ethereum\u2019s distinctive features. The user usually has a public and a private key to create digital signatures. <i><span style=\"font-weight: 400;\">User A<\/span><\/i><span style=\"font-weight: 400;\"> creates a signature with the private key. <\/span><i><span style=\"font-weight: 400;\">User B<\/span><\/i><span style=\"font-weight: 400;\"> can verify this signature by using user&#8217;s A public key.<\/span> While creating personal wallets, one has to make sure to store these keys somewhere. In case of loss, there is the threat of losing the funds forever.<\/p>\n<h3>Peer-to-Peer Network<\/h3>\n<p>Ethereum functions in a decentralized manner. It presents all nodes (computers) as peers in a distributed network ledger. The main advantage is that there is no dependence on a centralized server.<\/p>\n<h3>Ethereum Blockchain<\/h3>\n<p>The Ethereum ledger provides database storage of all active accounts enabled by a Patricia tree database. The latter is a specialized derivative of a Merkle tree storing various keys and values. It has a \u201croot hash,\u201d according to which it is impossible to change the tree content unless the root hash is modified. Each account includes stored data of its nonce, balance, code hash, and storage root.<\/p>\n<h3>Ethereum VM<\/h3>\n<p>The Ethereum blockchain functions with a native coding language. It also uses a consensus-based VM (virtual machine), executed worldwide. EVM is a protocol handling internal states and computational processes. <span style=\"font-weight: 400;\">EVM is similar to a large computational machine. It maintains a high number of accounts that interact with each other in a decentralized manner.<\/span><\/p>\n<p>Two account types are available:<\/p>\n<p>[table id=15 \/]<\/p>\n<p>Ethereum\u2019s execution environment is dispirited, meaning that nothing can happen and the account state will remain as it is. However, it is possible to trigger actions by sending external transactions to motion the process. For instance, if you need to execute a transaction to another EOA, you can transfer some Ethers to do so. However, if the transaction needs to appear in a contract, this contract will activate and run the code by itself. Codes can read and write according to their internal storage. They can read incoming messages and send them between contracts to trigger a reverse-execution process. Once the activity stops, the process of execution ceases, as well, until awakened by further transactions.<\/p>\n<p>The purpose of the contracts is to:<\/p>\n<ul>\n<li>manage data storage for contracts and external sources<\/li>\n<li>function as an external account. This means providing complex access by forwarding incoming messages between destinations<\/li>\n<li>maintain current contracts and user relationships, such as escrow or various insurance types<\/li>\n<li>function as a library by providing software functions to contracts<\/li>\n<\/ul>\n<p>Interaction between contracts happens due to calling activity and message-sending. These messages include details on Ether quantity, data byte-array, and participant addresses. As the contract receives these details, it can return specific information and functions exactly like a function call.<\/p>\n<h3>Nodes<\/h3>\n<p>Nodes are used in order to read and write on the blockchain, which one has to download entirely in advance. For this, nodes commonly use the VM. Nodes receive information, conduct certain operations with it, and then provide an output.<\/p>\n<h3>Miners<\/h3>\n<p>Ethereum miners are network nodes that mine (create and process) new blocks on the chain. Miners verify transactions within blocks to add them to the public blockchain ledger. They have to reach the consensus relative to the history of transactions. Consensus prevents fraud and deceitful behavior like double spending, for instance.<\/p>\n<p>In detail, it is necessary to run specific header metadata of a block with a hash function. This function provides a fixed string of random-looking numbers and letters. If the nonce value shows changes, there can be an impact on the output value of the hash.<\/p>\n<p><span style=\"font-weight: 400;\">If miners spot a hash matching the intended target, they receive an Ether reward. Then, they can broadcast the block for validation.<\/span> If another miner detects a matching hash, the first one stops working on the block and continues with the next one.<\/p>\n<h3>Proof of Work<\/h3>\n<p><span style=\"font-weight: 400;\">Proof of Work is an algorithm that enables miners to solve a block\u2019s problems. They receive the above-mentioned ETH rewards for a solution.<\/span> Due to this algorithm, all miners receive incentives to validate block data and ensure trust in the blockchain.<\/p>\n<p><img loading=\"lazy\" class=\"aligncenter size-full wp-image-2420\" src=\"https:\/\/applicature.com\/wp-content\/uploads\/2018\/09\/Ethereum-programming-tutorial-PoW.jpg\" alt=\"Proof of work in Ethereum blockchain\" width=\"800\" height=\"797\" srcset=\"https:\/\/applicature.com\/wp-content\/uploads\/2018\/09\/Ethereum-programming-tutorial-PoW.jpg 800w, https:\/\/applicature.com\/wp-content\/uploads\/2018\/09\/Ethereum-programming-tutorial-PoW-110x110.jpg 110w, https:\/\/applicature.com\/wp-content\/uploads\/2018\/09\/Ethereum-programming-tutorial-PoW-350x350.jpg 350w, https:\/\/applicature.com\/wp-content\/uploads\/2018\/09\/Ethereum-programming-tutorial-PoW-500x498.jpg 500w, https:\/\/applicature.com\/wp-content\/uploads\/2018\/09\/Ethereum-programming-tutorial-PoW-768x765.jpg 768w, https:\/\/applicature.com\/wp-content\/uploads\/2018\/09\/Ethereum-programming-tutorial-PoW-300x300.jpg 300w, https:\/\/applicature.com\/wp-content\/uploads\/2018\/09\/Ethereum-programming-tutorial-PoW-600x598.jpg 600w, https:\/\/applicature.com\/wp-content\/uploads\/2018\/09\/Ethereum-programming-tutorial-PoW-100x100.jpg 100w, https:\/\/applicature.com\/wp-content\/uploads\/2018\/09\/Ethereum-programming-tutorial-PoW-120x120.jpg 120w, https:\/\/applicature.com\/wp-content\/uploads\/2018\/09\/Ethereum-programming-tutorial-PoW-150x150.jpg 150w\" sizes=\"(max-width: 800px) 100vw, 800px\" \/><\/p>\n<h3>Gas<\/h3>\n<p><span style=\"font-weight: 400;\">In order to process transactions on the Ethereum blockchain, participants have to pay fees. They are determined in Ethers.<\/span><span style=\"font-weight: 400;\"> Fees are charged for computational actions called by participants in order to execute transactions. <\/span>These fees are called \u201cgas.\u201d Therefore, any transaction on the blockchain not only includes the necessary data, it also states the <strong>gas price<\/strong> and <strong>startGas<\/strong> value. Here\u2019s how it works:<\/p>\n<p>[table id=15 \/]<\/p>\n<h2>Ethereum Programming Language<\/h2>\n<p>It is possible to use a number of coding languages to <span style=\"color: #e70f00;\"><a style=\"color: #e70f00;\" href=\"https:\/\/applicature.com\/smart-contracts-development\/\">develop smart contracts<\/a><\/span> on the Ethereum platform:<\/p>\n<p>[table id=17 \/]<\/p>\n<p>In practice, <span style=\"color: #e70f00;\"><a style=\"color: #e70f00;\" href=\"https:\/\/applicature.com\/blog\/solidity-ethereum-smart-contracts\">Solidity<\/a><\/span> is the most widespread programming language for Ethereum smart contracts. It is Ethereum\u2019s native and was specially designed for this platform. Although there are several other official recommendations, like LLL or Viper, they are limited to particular preferences. In other words, why look for challenges? Just choose Solidity, as it is for Ethereum programming.<\/p>\n<p><span style=\"font-weight: 400;\">When writing in Solidity, make sure to double-check your codes. Run tests, use official security checks and audit to avoid possible <\/span><a href=\"https:\/\/applicature.com\/blog\/smart-contract-mistakes-bugs-pitfalls\"><span style=\"font-weight: 400;\"><span style=\"color: #e70f00;\">smart-contract mistakes<\/span>.<\/span><\/a><\/p>\n<p>When you write a Solidity contract, derive the compiler you prefer from the public library. You can use solc., Cosmo, or other compilers. Track the updates to choose the best one. After compiling the contract, you can send it to the network and call it with web3.js API. When that is done, it is possible to create web applications in order to interact with your contracts.<\/p>\n<h2>Ethereum Programming Course: Smart-Contract Deployment<\/h2>\n<p>Before <span style=\"color: #e70f00;\"><a style=\"color: #e70f00;\" href=\"https:\/\/applicature.com\/blog\/how-smart-contracts-blockchain-works\">creating a new smart contract<\/a><\/span>, it is better to set up the Truffle framework. This will enable you to test and compile the written SC. Smart contracts require compiling and deployment, which can be complex due to long transaction generation. Truffle simplifies these processes with the use of simple commands.<\/p>\n<p>Let\u2019s consider the basic steps of smart-contract writing:<\/p>\n<h3>Smart-Contract Creation<\/h3>\n<p>To begin with, let&#8217;s create a new contract, which will later be referred to as \u201ccontract1.\u201d<\/p>\n<pre line=\"1\" class=\"\" lang=\"Javascript\">pragma solidity ^0.4.4;\r\ncontract contract1 {\r\n    address contract1Admin;\r\n    mapping ( bytes32 =&gt; notarizedImage) notarizedImages; \/\/ this allows to look up notarized Images by their SHA256notaryHash\r\n    bytes32[] imagesByNotaryHash; \/\/ this is like whitepages of all images, by SHA256notaryHash\r\n    mapping ( address =&gt; User ) Users; \/\/ this allows to look up Users by their ethereum address\r\n    address[] usersByAddress; \/\/ this is like whitepages of all users, by ethereum address\r\n    struct notarizedImage {\r\n        string imageURL;\r\n        uint timeStamp;\r\n    }\r\n    struct User {\r\n        string handle;\r\n        bytes32 city;\r\n        bytes32 state;\r\n        bytes32 country;\r\n        bytes32[] myImages;\r\n    }\r\n}<\/pre>\n<p>Mapping functions as storage that enables users to create various objects and track them by address. Mapping stores data efficiently and provides details on it quickly. Considering that it isn\u2019t easy to replicate, the code provides an array usersByAddress holding all user addresses in the system.<\/p>\n<p>The notarizedImages enable image object creation. One can later track them in storage.<\/p>\n<p>It is also necessary to add a new user to the system. User structure contains basic data:<\/p>\n<ul>\n<li>handle<\/li>\n<li>city<\/li>\n<li>state<\/li>\n<li>country<\/li>\n<\/ul>\n<p>This structure also keeps data concerning the user\u2019s notarized images.<\/p>\n<p>Next, add the following functions to the code:<\/p>\n<pre line=\"1\" lang=\"Javascript\">function registerNewUser(string handle, bytes32 city, bytes32 state, bytes32 country) returns (bool success) {\r\n    address thisNewAddress = msg.sender;\r\n    \/\/ don't overwrite existing entries, and make sure handle isn't null\r\n    if(bytes(Users[msg.sender].handle).length == 0 &amp;&amp; bytes(handle).length != 0){\r\n        Users[thisNewAddress].handle = handle;\r\n        Users[thisNewAddress].city = city;\r\n        Users[thisNewAddress].state = state;\r\n        Users[thisNewAddress].country = country;\r\n        usersByAddress.push(thisNewAddress); \/\/ adds an entry for this user to the user 'whitepages'\r\n        return true;\r\n    } else {\r\n        return false; \/\/ either handle was null, or a user with this handle already existed\r\n    }\r\n}<\/pre>\n<p>Next, add the addImageToUser function:<\/p>\n<pre line=\"1\" lang=\"Javascript\">function addImageToUser(string imageURL, bytes32 SHA256notaryHash) returns (bool success) {\r\n    address thisNewAddress = msg.sender;\r\n    if (bytes(Users[thisNewAddress].handle).length != 0) { \/\/ make sure this user has created an account first\r\n        if (bytes(imageURL).length != 0) {\r\n            \/\/ prevent users from fighting over sha-&gt;image listings in the whitepages, but still allow them to add a personal ref to any sha\r\n            if(bytes(notarizedImages[SHA256notaryHash].imageURL).length == 0) {\r\n                imagesByNotaryHash.push(SHA256notaryHash); \/\/ adds entry for this image to our image whitepages\r\n            }\r\n            notarizedImages[SHA256notaryHash].imageURL = imageURL;\r\n            notarizedImages[SHA256notaryHash].timeStamp = block.timestamp; \/\/ note that updating an image also updates the timestamp\r\n            Users[thisNewAddress].myImages.push(SHA256notaryHash); \/\/ add the image hash to this users .myImages array\r\n            return true;\r\n        } else {\r\n            return false; \/\/ either imageURL or SHA256notaryHash was null, couldn't store image\r\n        }\r\n        return true;\r\n    } else {\r\n        return false; \/\/ user didn't have an account yet, couldn't store image\r\n    }\r\n}<\/pre>\n<p>This function is similar to the previous one. It finds your account by sending the address and verifying the registration. After this has been completed, you can add new images to the user\u2019s entry.<\/p>\n<p>The final step is to create the getUsers function. It enables the viewing of all users and images as well as procurement of white-page listings. The data, according to this function, returns instantly, but only in the \u201cread\u201d regime.<\/p>\n<pre line=\"1\" lang=\"Javascript\">function getUsers() constant returns (address[]) {\r\n    return usersByAddress;\r\n}\r\nfunction getUser(address userAddress) constant returns (string,bytes32,bytes32,bytes32,bytes32[]) {\r\n    return (\r\n        Users[userAddress].handle,\r\n        Users[userAddress].city,\r\n        Users[userAddress].state,\r\n        Users[userAddress].country,\r\n        Users[userAddress].myImages\r\n    );\r\n}\r\nfunction getAllImages() constant returns (bytes32[]) { return imagesByNotaryHash; }\r\nfunction getUserImages(address userAddress) constant returns (bytes32[]) { return Users[userAddress].myImages; }\r\nfunction getImage(bytes32 SHA256notaryHash) constant returns (string,uint) {\r\n    return (\r\n        notarizedImages[SHA256notaryHash].imageURL,\r\n        notarizedImages[SHA256notaryHash].timeStamp\r\n    );\r\n}<\/pre>\n<h3>Smart-Contract Testing<\/h3>\n<p>Basically, we have now written the smart contract. Before its deployment to the network, it has to be tested and compiled. As mentioned above, the Truffle framework is one of the best matches. It uses simple commands to test your smart contract.<\/p>\n<p>First, create a local Ethereum node to run your test-outs. Ethereum TestRPC works as a fake node, according to a program pretending to be a node and responding as such. It tests the solidity contract, runs its codes, and provides the responses. <span style=\"font-weight: 400;\">What\u2019s beneficial about this testing mode is that it works really fast. You don\u2019t need to spend as much time as on the real network.<\/span><\/p>\n<p>Next, run testing in the <a href=\"https:\/\/truffleframework.com\/\" target=\"_blank\" rel=\"noopener noreferrer\"><span style=\"color: #e70f00;\">Truffle framework<\/span>:<\/a><\/p>\n<p><img loading=\"lazy\" class=\"aligncenter size-full wp-image-2424\" src=\"https:\/\/applicature.com\/wp-content\/uploads\/2018\/09\/Truffle-sc-testing.jpg\" alt=\"Truffle smart contract testing\" width=\"816\" height=\"1056\" srcset=\"https:\/\/applicature.com\/wp-content\/uploads\/2018\/09\/Truffle-sc-testing.jpg 791w, https:\/\/applicature.com\/wp-content\/uploads\/2018\/09\/Truffle-sc-testing-85x110.jpg 85w, https:\/\/applicature.com\/wp-content\/uploads\/2018\/09\/Truffle-sc-testing-270x350.jpg 270w, https:\/\/applicature.com\/wp-content\/uploads\/2018\/09\/Truffle-sc-testing-386x500.jpg 386w, https:\/\/applicature.com\/wp-content\/uploads\/2018\/09\/Truffle-sc-testing-768x994.jpg 768w, https:\/\/applicature.com\/wp-content\/uploads\/2018\/09\/Truffle-sc-testing-600x777.jpg 600w, https:\/\/applicature.com\/wp-content\/uploads\/2018\/09\/Truffle-sc-testing-93x120.jpg 93w, https:\/\/applicature.com\/wp-content\/uploads\/2018\/09\/Truffle-sc-testing-232x300.jpg 232w\" sizes=\"(max-width: 816px) 100vw, 816px\" \/><\/p>\n<p>While testing, specify the contract name and call the \u201ctruffle compile\u201d command. If any errors occur, work around them and eliminate. Then, call the \u201ctruffle migrate\u201d command. This deploys your contract in test mode. The output can look like this:<\/p>\n<pre line=\"1\" lang=\"Javascript\">Running migration: 1_initial_migration.js\r\nDeploying Migrations...\r\nMigrations: 0xd06a1935230c5bae8c7ecf75fbf4f17a04564ed8\r\nSaving successful migration to network...\r\nSaving artifacts...\r\nRunning migration: 2_deploy_contracts.js\r\nDeploying Contract1...\r\nContract1: 0xe70ff0fa937a25d5dd4172318fa1593baba5a027\r\nSaving successful migration to network...\r\nSaving artifacts...<\/pre>\n<p>Now, you can start the first real testing to set the SC interaction. Run the truffle console to ensure that everything functions. Later, you\u2019ll be able to add new users and images:<\/p>\n<pre line=\"1\" lang=\"Javascript\">truffle console\r\n&gt; Contract1= Contract1.deployed()\r\n&gt; Contract1.then(function(instance){return JSON.stringify(instance.abi);})\r\n&gt; Contract1.then(function(instance){return instance.registerNewUser(\"Tectract\",\"Denver\",\"CO\",\"USA\");})\r\n&gt; Contract1.then(function(instance){return instance.addImageToUser('www.myimageURL.com','0x6c3e007e281f6948b37c511a11e43c8026d2a16a8a45fed4e83379b66b0ab927');})\r\n&gt; Contract1.then(function(instance){return instance.getUser('0x0ac21f1a6fe22241ccd3af85477e5358ac5847c2');}) \r\n&gt; Contract1.then(function(instance){return instance.getUsers();})\r\n&gt; Contract1.then(function(instance){return instance.getImages();})\r\n&gt; Contract1.then(function(instance){return instance.getImage('0x6c3e007e281f6948b37c511a11e43c8026d2a16a8a45fed4e83379b66b0ab927');})<\/pre>\n<p>After you\u2019ve finished testing, your smart contract is ready! Check out another simple way to <span style=\"color: #e70f00;\"><a style=\"color: #e70f00;\" href=\"https:\/\/applicature.com\/blog\/create-smart-contract-quickly-and-easily\">create smart contracts easily<\/a><\/span>!<\/p>\n<p><span style=\"font-weight: 400;\">Ready? Next step is to create an appealing UI (user interface). You\u2019ll need it to enable user interaction with the smart contract on the Ethereum blockchain.<\/span><\/p>\n<h2>Ethereum Programming Course: DApp Development<\/h2>\n<p><a href=\"https:\/\/applicature.com\/blog\/blockchain-app-development\"><span style=\"color: #e70f00;\">Decentralized application creation<\/span><\/a> allows other users to interact with your SC via their browser. DApps can be created with a particular Web3.js javascript module.<\/p>\n<p>First, install the web3 module:<\/p>\n<pre line=\"1\" lang=\"Javascript\">import Web3 from \u2018web3\u2019;<\/pre>\n<p>or, in ES6 javascript<\/p>\n<pre line=\"1\" lang=\"Javascript\">var Web3 = require(\u2018web3\u2019);<\/pre>\n<p>Provide web3 with specific details concerning your node and smart contract. You should get the following output:<\/p>\n<pre line=\"1\" lang=\"Javascript\">\/\/ this line specificies our localhost node IP:port settings\r\nvar web3 = new Web3(new Web3.providers.HttpProvider(\"http:\/\/localhost:8545\"));\r\n\/\/ our smart-contract address, from above\r\nvar Contract1Address = '0xe70ff0fa937a25d5dd4172318fa1593baba5a027';\r\n\/\/ our smart-contract ABI, as raw javascript object, not quoted string!\r\nvar Contract1ABI = [{\"constant\": true,\"inputs\":[],\"name\":\"getUsers\",\"outputs\":[{\"name\": \"...\"}]}\r\n\/\/ this loads the smart-contract into our web3 object\r\nContract1Contract = web3.eth.contract(Contract1ABI).at(Contract1Address);\r\n\/\/ this finds the default account listed for the node connection (account 0 from TestRPC above)\r\ndefaultAccount = web3.eth.accounts[0];\r\n\/\/ Here are some lines that demonstrate read-only functions interfacing with our smart contract via web3:\r\n\/\/ the below function is activated when the page loads, to get the \"white-pages\" of all known user addresses\r\nContract1Contract.getUsers(function(err,usersResult){})\r\n\/\/ the below function grabs an image as needed, and stores them in browser memory...\r\nContract1Contract.getImage(imageHash,function(err,imageResult){})<\/pre>\n<p>Further, you\u2019ll need to connect your DApp to the Ethereum main network. In order to enable mainnet interaction, most users today choose the Metamask plugin. This plugin ensures connection to a full node without charging any fees. We should stress, however, that this option works only with the Chrome browser.<\/p>\n<p>Consider the following list of tools best-matched to DApp deployment:<\/p>\n<p>[table id=18 \/]<\/p>\n<p>The following web3 code changes automatically to the customary client via Metamask:<\/p>\n<pre line=\"1\" lang=\"Javascript\">function loadWeb3() {\r\n    let web3Injected = window.web3;\r\n    if (typeof web3Injected !== 'undefined') {\r\n        console.log('saw injected web3!');\r\n        web3 = new Web3(web3Injected.currentProvider);\r\n    } else {\r\n        console.log('did not see web3 injected!');\r\n        web3 = new Web3(new Web3.providers.HttpProvider('http:\/\/localhost:8545'));\r\n    }\r\n}<\/pre>\n<p>In order to start DApp functioning, you\u2019ll be required to pay a certain amount of gas. You\u2019ll get notified. Further, you can choose various users in your user interface and browse data about them.<\/p>\n<h2>Conclusion<\/h2>\n<p>Ethereum is a multi-functional, decentralized platform that solves an array of tasks and problems. Its functionality is proven by its speed, scalability, cryptography, and other notable features. Its main purpose is to serve as a platform for smart-contract development, with Solidity being the native coding language. We have provided this basic Ethereum programming course to quickly deploy your smart contract and create a DApp for it.<\/p>\n<p><span style=\"font-weight: 400;\">Do you have any questions? Would you like to specify certain details? Find out more about <\/span><span style=\"color: #e70f00;\"><a style=\"color: #e70f00;\" href=\"https:\/\/applicature.com\/about-applicature\"><span style=\"font-weight: 400;\">Applicature<\/span><\/a><\/span><span style=\"font-weight: 400;\">\u2019s expert team and <\/span><span style=\"color: #e70f00;\"><a style=\"color: #e70f00;\" href=\"https:\/\/applicature.com\/contact-us\/\"><span style=\"font-weight: 400;\">Contact us<\/span><\/a><\/span><span style=\"font-weight: 400;\"> today!\u00a0<\/span><\/p>\n","protected":false},"excerpt":{"rendered":"<p>Ethereum is a multi-purpose platform designed to solve a number of tasks. In the following article, we will outline the basics of Ethereum programming, its functionality, and its features. Below, you will find an Ethereum programming tutorial explaining the easy steps of smart-contract and DApp deployment. The Ethereum platform is a creation of Vitalik Buterin. [&hellip;]<\/p>\n","protected":false},"author":12,"featured_media":173972,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[132],"tags":[154,195,258,261],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v14.7 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Step-by-Step Ethereum Programming Tutorial for Newbies<\/title>\n<meta name=\"description\" content=\"Ethereum is used for smart-contract and dApp deployment. Use our Ethereum programming tutorial to deploy SCs and DApps easily, securely and efficiently.\" \/>\n<meta name=\"robots\" content=\"index, follow\" \/>\n<meta name=\"googlebot\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<meta name=\"bingbot\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/applicature.com\/blog\/blockchain-technology\/ethereum-programming-tutorial\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Ethereum Programming Tutorial for Newbies\" \/>\n<meta property=\"og:description\" content=\"Ethereum is a multi-purpose blockchain platform that is highly efficient in its performance and functionality. Learn Ethereum programming basics with our step-by-step tutorial.\" \/>\n<meta property=\"og:url\" content=\"https:\/\/applicature.com\/blog\/blockchain-technology\/ethereum-programming-tutorial\/\" \/>\n<meta property=\"og:site_name\" content=\"Applicature\" \/>\n<meta property=\"article:publisher\" content=\"https:\/\/www.facebook.com\/applicature\/\" \/>\n<meta property=\"article:published_time\" content=\"2018-10-01T09:56:52+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2022-01-11T20:25:26+00:00\" \/>\n<meta property=\"og:image\" content=\"https:\/\/applicature.com\/wp-content\/uploads\/2018\/09\/Step-by-Step-Ethereum-Programming-Guide-02.jpg\" \/>\n\t<meta property=\"og:image:width\" content=\"1100\" \/>\n\t<meta property=\"og:image:height\" content=\"575\" \/>\n<meta property=\"fb:app_id\" content=\"156197445002802\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebSite\",\"@id\":\"https:\/\/applicature.com\/#website\",\"url\":\"https:\/\/applicature.com\/\",\"name\":\"Applicature\",\"description\":\"Blockchain \/ Smart Contracts \/ Decentralized Apps\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":\"https:\/\/applicature.com\/?s={search_term_string}\",\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/applicature.com\/blog\/blockchain-technology\/ethereum-programming-tutorial\/#primaryimage\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/applicature.com\/wp-content\/uploads\/2018\/10\/36.png\",\"width\":1100,\"height\":575},{\"@type\":\"WebPage\",\"@id\":\"https:\/\/applicature.com\/blog\/blockchain-technology\/ethereum-programming-tutorial\/#webpage\",\"url\":\"https:\/\/applicature.com\/blog\/blockchain-technology\/ethereum-programming-tutorial\/\",\"name\":\"Step-by-Step Ethereum Programming Tutorial for Newbies\",\"isPartOf\":{\"@id\":\"https:\/\/applicature.com\/#website\"},\"primaryImageOfPage\":{\"@id\":\"https:\/\/applicature.com\/blog\/blockchain-technology\/ethereum-programming-tutorial\/#primaryimage\"},\"datePublished\":\"2018-10-01T09:56:52+00:00\",\"dateModified\":\"2022-01-11T20:25:26+00:00\",\"author\":{\"@id\":\"https:\/\/applicature.com\/#\/schema\/person\/17f46426cb241f38a85a4789b6367bc1\"},\"description\":\"Ethereum is used for smart-contract and dApp deployment. Use our Ethereum programming tutorial to deploy SCs and DApps easily, securely and efficiently.\",\"breadcrumb\":{\"@id\":\"https:\/\/applicature.com\/blog\/blockchain-technology\/ethereum-programming-tutorial\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/applicature.com\/blog\/blockchain-technology\/ethereum-programming-tutorial\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/applicature.com\/blog\/blockchain-technology\/ethereum-programming-tutorial\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"item\":{\"@type\":\"WebPage\",\"@id\":\"https:\/\/applicature.com\/blog\/blockchain-technology\/ethereum-programming-tutorial\/\",\"url\":\"https:\/\/applicature.com\/blog\/blockchain-technology\/ethereum-programming-tutorial\/\",\"name\":\"Ethereum Programming Basics\"}}]},{\"@type\":[\"Person\"],\"@id\":\"https:\/\/applicature.com\/#\/schema\/person\/17f46426cb241f38a85a4789b6367bc1\",\"name\":\"Olga Hryniuk\",\"image\":{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/applicature.com\/#personlogo\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/applicature.com\/wp-content\/uploads\/2018\/11\/applicature-figure.png\",\"caption\":\"Olga Hryniuk\"}}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","_links":{"self":[{"href":"https:\/\/applicature.com\/wp-json\/wp\/v2\/posts\/2416"}],"collection":[{"href":"https:\/\/applicature.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/applicature.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/applicature.com\/wp-json\/wp\/v2\/users\/12"}],"replies":[{"embeddable":true,"href":"https:\/\/applicature.com\/wp-json\/wp\/v2\/comments?post=2416"}],"version-history":[{"count":0,"href":"https:\/\/applicature.com\/wp-json\/wp\/v2\/posts\/2416\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/applicature.com\/wp-json\/wp\/v2\/media\/173972"}],"wp:attachment":[{"href":"https:\/\/applicature.com\/wp-json\/wp\/v2\/media?parent=2416"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/applicature.com\/wp-json\/wp\/v2\/categories?post=2416"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/applicature.com\/wp-json\/wp\/v2\/tags?post=2416"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}