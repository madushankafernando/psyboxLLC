{"id":108,"date":"2017-09-27T21:23:49","date_gmt":"2017-09-27T21:23:49","guid":{"rendered":"https:\/\/applicature.com\/?p=108"},"modified":"2019-08-01T13:00:14","modified_gmt":"2019-08-01T13:00:14","slug":"history-of-ethereum-security-vulnerabilities-hacks-and-their-fixes","status":"publish","type":"post","link":"https:\/\/applicature.com\/blog\/blockchain-technology\/history-of-ethereum-security-vulnerabilities-hacks-and-their-fixes","title":{"rendered":"History of Ethereum Security Vulnerabilities, Hacks, and Their Fixes"},"content":{"rendered":"<h1>Smart Contract as a Safe and Secure Method of Conducting Transactions<\/h1>\n<p>In this article, we gathered related material on Ethereum vulnerabilities and hacks from different sources. It will be useful both for <a href=\"https:\/\/applicature.com\/blog\/blockchain-technology\/how-to-become-a-blockchain-developer-2\" target=\"_blank\" rel=\"noopener noreferrer\">blockchain developers of smart contacts<\/a> and researchers. Providing you with the common errors and human mistakes in smart contracts we aim to make a guide of their history and fixes, to promote the verification techniques for a smart contract.<\/p>\n<p>First of all, it is worth noting about the <a href=\"https:\/\/applicature.com\/blog\/blockchain-technology\/how-to-use-smart-contracts-with-blockchain-technology\" target=\"_blank\" rel=\"noopener noreferrer\">functionality of smart contracts<\/a> and their decentralized way of keeping assets.<\/p>\n<p><img loading=\"lazy\" class=\"size-full wp-image-4553 aligncenter\" src=\"http:\/\/localhost\/applicatore\/wp-content\/uploads\/2017\/09\/Screen-Shot-2019-07-15-at-22.54.56.png\" alt=\"what-is-smart-contract\" width=\"726\" height=\"251\" srcset=\"https:\/\/applicature.com\/wp-content\/uploads\/2017\/09\/Screen-Shot-2019-07-15-at-22.54.56.png 726w, https:\/\/applicature.com\/wp-content\/uploads\/2017\/09\/Screen-Shot-2019-07-15-at-22.54.56-132x46.png 132w, https:\/\/applicature.com\/wp-content\/uploads\/2017\/09\/Screen-Shot-2019-07-15-at-22.54.56-350x121.png 350w, https:\/\/applicature.com\/wp-content\/uploads\/2017\/09\/Screen-Shot-2019-07-15-at-22.54.56-500x173.png 500w, https:\/\/applicature.com\/wp-content\/uploads\/2017\/09\/Screen-Shot-2019-07-15-at-22.54.56-600x207.png 600w, https:\/\/applicature.com\/wp-content\/uploads\/2017\/09\/Screen-Shot-2019-07-15-at-22.54.56-120x41.png 120w, https:\/\/applicature.com\/wp-content\/uploads\/2017\/09\/Screen-Shot-2019-07-15-at-22.54.56-300x104.png 300w\" sizes=\"(max-width: 726px) 100vw, 726px\" \/><\/p>\n<p>The most mainstream and well-known smart contract was <span style=\"color: #e70f00;\"><a style=\"color: #e70f00;\" href=\"https:\/\/en.wikipedia.org\/wiki\/The_DAO_(organization)\">the DAO<\/a><\/span>, which launched with US$250 million in ICO in May 2016, and then was hacked. This attack affected the further destiny of the Ethereum network remaining trust and security behind blockchain technology achievements. Subsequent events changed the conception of Ethereum and blockchain in general. Let\u2019s see how on <a href=\"https:\/\/applicature.com\/blog\/blockchain-technology\/blockchain-code-examples\" target=\"_blank\" rel=\"noopener noreferrer\">blockchain technology code examples:<\/a><\/p>\n<h2><strong>DAO<br \/>\n<\/strong><\/h2>\n<ul>\n<li><em>On June 17, 2006,<\/em> the attacker drained approximately 3.5M ETH (~$50M) from the DAO smart contract, collected in an ICO a month earlier. The DAO hack occurred after the token sale had already ended.<\/li>\n<li>The attack happened due to a <span style=\"color: #e70f00;\"><a style=\"color: #e70f00;\" href=\"http:\/\/hackingdistributed.com\/2016\/06\/16\/scanning-live-ethereum-contracts-for-bugs\/\">recursive calling vulnerability<\/a><\/span>. The attacker withdrew Ether from The DAO smart contract multiple times using the same DAO Tokens. In this exploit, the attacker was able to call the split function recursively inside of the split, before the smart contract could update its own balance. There were<em> two main issues <\/em>that made this possible:<\/li>\n<\/ul>\n<ol>\n<li style=\"text-align: left;\">When the DAO smart contract was creating the coders did not take into account the possibility of a recursive call.<\/li>\n<li>The fact that the smart contract first sent the ETH funds and then updated the internal token balance.<\/li>\n<\/ol>\n<p>&nbsp;<\/p>\n<ul>\n<li>The DAO has 663 lines of code (without empty lines and comments) \u2014 for roughly 860 commits by 18 different contributors. <span style=\"color: #e70f00;\"><a style=\"color: #e70f00;\" href=\"http:\/\/www.mayerdan.com\/ruby\/2012\/11\/11\/bugs-per-line-of-code-ratio\">Statistics<\/a><\/span> show that there are up to 15\u201350 bugs per 1000 lines of code. Although extensive testing and auditing can significantly reduce this number, it is very hard to bring it down to 0.<\/li>\n<li>Therefore, smart contracts should be kept as simple as possible, doubly so when they are made immutable.<\/li>\n<li>The experts in the community suggested a soft fork to stop ETH draining.<\/li>\n<li>Hence, a solution was worked out by Vitalik Buterin the Ethereum Foundation on <span style=\"color: #e70f00;\"><a style=\"color: #e70f00;\" href=\"https:\/\/blog.ethereum.org\/2016\/06\/17\/critical-update-re-dao-vulnerability\/\">June 17<\/a><\/span>, where he issued a critical update:<\/li>\n<\/ul>\n<blockquote><p><img loading=\"lazy\" class=\"alignnone size-full wp-image-4554\" src=\"http:\/\/localhost\/applicatore\/wp-content\/uploads\/2017\/09\/Screen-Shot-2019-07-15-at-23.08.04.png\" alt=\"blockchain-code\" width=\"858\" height=\"131\" srcset=\"https:\/\/applicature.com\/wp-content\/uploads\/2017\/09\/Screen-Shot-2019-07-15-at-23.08.04.png 858w, https:\/\/applicature.com\/wp-content\/uploads\/2017\/09\/Screen-Shot-2019-07-15-at-23.08.04-132x20.png 132w, https:\/\/applicature.com\/wp-content\/uploads\/2017\/09\/Screen-Shot-2019-07-15-at-23.08.04-350x53.png 350w, https:\/\/applicature.com\/wp-content\/uploads\/2017\/09\/Screen-Shot-2019-07-15-at-23.08.04-500x76.png 500w, https:\/\/applicature.com\/wp-content\/uploads\/2017\/09\/Screen-Shot-2019-07-15-at-23.08.04-768x117.png 768w, https:\/\/applicature.com\/wp-content\/uploads\/2017\/09\/Screen-Shot-2019-07-15-at-23.08.04-600x92.png 600w, https:\/\/applicature.com\/wp-content\/uploads\/2017\/09\/Screen-Shot-2019-07-15-at-23.08.04-120x18.png 120w, https:\/\/applicature.com\/wp-content\/uploads\/2017\/09\/Screen-Shot-2019-07-15-at-23.08.04-300x46.png 300w\" sizes=\"(max-width: 858px) 100vw, 858px\" \/><\/p><\/blockquote>\n<ul>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">Another proposal was in the terms of <\/span><span style=\"font-weight: 400;\">infringement the rules and it was more aggressive: the hard-fork, the function of which would have only withdrawn function. <\/span><span style=\"font-weight: 400;\">The aim of this <\/span><span style=\"color: #e70f00;\"><a style=\"color: #e70f00;\" href=\"https:\/\/blog.ethereum.org\/2016\/07\/15\/to-fork-or-not-to-fork\/\"><span style=\"font-weight: 400;\">hard-fork<\/span><\/a><\/span><span style=\"font-weight: 400;\"><span style=\"font-weight: 400;\"><span style=\"font-weight: 400;\"><span style=\"font-weight: 400;\"> was to ask miners to return all raised tokens to the DAO, refunding smart contract.<\/span><\/span><\/span><\/span><\/li>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">From this contract, DAO token holders could submit their DAO in order to withdraw ETH at a rate of 1 ETH = 100 DAO. <\/span><\/li>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">Having heard about the software fork proposal, the hackers stopped the attack.<\/span><\/span><\/li>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">At the same time, there was a spontaneous formation of a Robin Hood Group, who drained the remaining funds of the DAO in order to prevent further hacks. The intention was also to hand the ETH back to its original owners.<\/span><\/span><\/li>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">On July 20, 2016, hard-fork took place. After the hard-fork implementation, <\/span><span style=\"color: #e70f00;\"><a style=\"color: #e70f00;\" href=\"https:\/\/www.cryptocompare.com\/coins\/guides\/what-is-ethereum-classic\/\"><span style=\"font-weight: 400;\">Ethereum Classic was born<\/span><\/a><\/span><span style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">.<\/span><\/span><\/li>\n<\/ul>\n<p>&nbsp;<\/p>\n<h2><b>King of the Ether Throne, Rubixi and GovernMental smart contracts<\/b><\/h2>\n<p><span style=\"font-weight: 400;\">To set the scene for the analysis of the security of smart contracts, let\u2019s consider some examples of vulnerabilities, allowing the attackers to steal or tamper the assets. We have found a research paper providing the causes of the Ethereum smart contract vulnerabilities in a taxonomy. It is the work written by Nicola Atzei, Massimo Bartoletti, and Tiziana Cimoli \u00a0(Universit`a degli Studi di Cagliari, Cagliari, Italy). <\/span><\/p>\n<p><span style=\"font-weight: 400;\">Let\u2019s review next three smart contracts with such kinds of vulnerabilities:<\/span><\/p>\n<ul>\n<li><em>Gasless send<\/em>:\u00a0King of the Ether Throne<\/li>\n<li><em>Exception disorders<\/em>:\u00a0KoET, GovernMental<\/li>\n<li><em>Immutable bugs<\/em>: Rubixi, GovernMental<\/li>\n<li><em>Stack size limit<\/em>: GovernMental<\/li>\n<li><em>Unpredictable state<\/em>: GovernMental<\/li>\n<li><em>Time constraints<\/em>:\u00a0GovernMental<\/li>\n<\/ul>\n<p><span style=\"font-weight: 400;\">The whole paperwork you can find <\/span><span style=\"color: #e70f00;\"><a style=\"color: #e70f00;\" href=\"https:\/\/eprint.iacr.org\/2016\/1007.pdf\"><span style=\"font-weight: 400;\">here<\/span><\/a><\/span><span style=\"font-weight: 400;\">.<\/span><\/p>\n<p>&nbsp;<\/p>\n<h3><b>King of the Ether Throne<\/b><b><br \/>\n<\/b><\/h3>\n<ul>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">The \u201cKing of the Ether Throne\u201d is a game where players compete for acquiring the title of \u201cKing of the Ether\u201d. If someone wishes to be the king, he must pay some ether to the current king, plus a small fee to the contract. Here is a simplified version of the game (with the same vulnerabilities), implemented as the contract KotET:<\/span><\/li>\n<\/ul>\n<p><img loading=\"lazy\" class=\"aligncenter wp-image-109 size-full\" src=\"http:\/\/localhost\/applicatore\/wp-content\/uploads\/2017\/09\/1.png\" alt=\"KoET\" width=\"849\" height=\"242\" data-wp-pid=\"109\" srcset=\"https:\/\/applicature.com\/wp-content\/uploads\/2017\/09\/1.png 849w, https:\/\/applicature.com\/wp-content\/uploads\/2017\/09\/1-350x100.png 350w, https:\/\/applicature.com\/wp-content\/uploads\/2017\/09\/1-500x143.png 500w, https:\/\/applicature.com\/wp-content\/uploads\/2017\/09\/1-768x219.png 768w, https:\/\/applicature.com\/wp-content\/uploads\/2017\/09\/1-600x171.png 600w, https:\/\/applicature.com\/wp-content\/uploads\/2017\/09\/1-132x38.png 132w\" sizes=\"(max-width: 849px) 100vw, 849px\" \/><\/p>\n<ul>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">Whenever a player sends <\/span><span style=\"color: #333333;\"><strong>msg.value<\/strong><\/span><span style=\"font-weight: 400;\"> ether to the contract, he also triggers the execution of KotET\u2019s fallback. The fallback first checks that the sent ether is enough to buy the title: if not, it throws an exception (reverting the ether transfer); otherwise, the player is accepted as the new king. At this point, a <\/span><strong>compensation <\/strong><span style=\"font-weight: 400;\">is sent to the dismissing king, and the player is crowned. The difference between <\/span><strong>msg.value<\/strong><span style=\"font-weight: 400;\"> and the compensation is kept by the contract. The owner of KotET can withdraw the ether accumulated in the contract through <\/span><strong>sweepCommission<\/strong><span style=\"font-weight: 400;\">.<\/span><\/li>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">Apparently, the contract may seem honest: in fact, it is not, because not checking the return code of <\/span><strong>send <\/strong><span style=\"font-weight: 400;\">may result in stealing ether17. Indeed, since send is equipped with a few gas (see \u201cgasless send\u201d vulnerability), the <\/span><strong>send<\/strong><span style=\"font-weight: 400;\"> at line 17 will fail if the king\u2019s address is that of a contract with an expensive fallback. In this case, since <\/span><strong>send<\/strong><span style=\"font-weight: 400;\"> does not propagate exceptions (see \u201cexception disorder\u201d), the <\/span><strong>compensation<\/strong><span style=\"font-weight: 400;\"> is kept by the contract. <\/span><\/li>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">Now, assume that an honest programmer wants to implement a fair variant of KotET, by replacing <strong><span style=\"\u201dfont-family: Courier;\">send<\/span> <\/strong><span style=\"font-weight: 400;\">with <\/span><strong>call <\/strong><span style=\"font-weight: 400;\">at line 6, and by checking its return code:<\/span><\/span><\/li>\n<\/ul>\n<p><img loading=\"lazy\" class=\"aligncenter size-full wp-image-110\" src=\"http:\/\/localhost\/applicatore\/wp-content\/uploads\/2017\/09\/KoET2.png\" alt=\"KoET2\" width=\"704\" height=\"171\" data-wp-pid=\"110\" srcset=\"https:\/\/applicature.com\/wp-content\/uploads\/2017\/09\/KoET2.png 704w, https:\/\/applicature.com\/wp-content\/uploads\/2017\/09\/KoET2-350x85.png 350w, https:\/\/applicature.com\/wp-content\/uploads\/2017\/09\/KoET2-500x121.png 500w, https:\/\/applicature.com\/wp-content\/uploads\/2017\/09\/KoET2-600x146.png 600w, https:\/\/applicature.com\/wp-content\/uploads\/2017\/09\/KoET2-132x32.png 132w\" sizes=\"(max-width: 704px) 100vw, 704px\" \/><\/p>\n<ul>\n<li><span style=\"font-weight: 400;\">This variant is more trustworthy than the previous but vulnerable to a denial of service attack. To see why, consider an attacker <\/span><strong>Mallory<\/strong><span style=\"font-weight: 400;\">, whose fallback just throws an exception. The adversary calls <\/span><strong>unseatKing<\/strong><span style=\"font-weight: 400;\"> with the right amount of ether, so that <\/span><span style=\"font-weight: 400;\">Mallory<\/span><span style=\"font-weight: 400;\"> becomes the new king. At this point, nobody else can get her crown, since every time KotET tries to send the <\/span><strong>compensation to Mallory<\/strong><span style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">, her fallback throws an exception, preventing the coronation to succeed.<\/span><\/span><\/li>\n<\/ul>\n<p>&nbsp;<\/p>\n<h3><b>Rubixi<\/b><b><br \/>\n<\/b><\/h3>\n<ul>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">Rubixi is a contract which implements a <\/span><span style=\"color: #e70f00;\"><a style=\"color: #e70f00;\" href=\"https:\/\/en.wikipedia.org\/wiki\/Ponzi_scheme\"><span style=\"font-weight: 400;\">Ponzi scheme<\/span><\/a><\/span><span style=\"font-weight: 400;\">, <\/span><span style=\"font-weight: 400;\">a fraudulent investment operation where the operator generates returns for older investors through revenue paid by new investors<\/span><span style=\"font-weight: 400;\">. Further, the contract owner can collect some fees, paid to the contract upon investments. <\/span><\/li>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">During the contract elaboration, its primary name <\/span><i><span style=\"font-weight: 400;\">Dynamic Pyramid<\/span><\/i><span style=\"font-weight: 400;\"> was changed to <\/span><i><span style=\"font-weight: 400;\">Rubixi<\/span><\/i><span style=\"font-weight: 400;\">. However, the name of the constructor was not correspondingly changed by the programmers. This function then became invokable by anyone. Due to it, the \u201cimmutable bugs\u201d vulnerability was exploited. In such a way, the hack allows an opponent to steal some ether from the contract.<\/span><\/li>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">The Dynamic Pyramid function sets the owner address; the owner can withdraw his profit via <\/span><strong>collectAllFees<\/strong><span style=\"font-weight: 400;\">.<\/span><\/li>\n<\/ul>\n<p><img loading=\"lazy\" class=\"aligncenter size-full wp-image-111\" src=\"http:\/\/localhost\/applicatore\/wp-content\/uploads\/2017\/09\/Rubixi.png\" alt=\"Rubixi\" width=\"573\" height=\"114\" data-wp-pid=\"111\" srcset=\"https:\/\/applicature.com\/wp-content\/uploads\/2017\/09\/Rubixi.png 573w, https:\/\/applicature.com\/wp-content\/uploads\/2017\/09\/Rubixi-350x70.png 350w, https:\/\/applicature.com\/wp-content\/uploads\/2017\/09\/Rubixi-500x99.png 500w, https:\/\/applicature.com\/wp-content\/uploads\/2017\/09\/Rubixi-132x26.png 132w\" sizes=\"(max-width: 573px) 100vw, 573px\" \/><\/p>\n<ul>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">After this bug became public, users started to invoke Dynamic Pyramid in order to become the owner, and so to withdraw the fees.<\/span><\/span><\/li>\n<\/ul>\n<p>&nbsp;<\/p>\n<h3>GovernMental<\/h3>\n<ul>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">GovernMental&#8217;s 1100 ETH jackpot payout was stuck because it used too much gas.<\/span><\/li>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">GovernMental is another flawed Ponzi scheme. To join the scheme, a participant must send a certain amount of ether to the contract. If no one joins the scheme for 12 hours, the last participant gets all the ether in the contract (except for a fee kept by the owner). The list of participants and their credit are stored in two arrays. When the 12 hours are expired, the last participant can claim the money, and the arrays are cleared as follows:<\/span><\/li>\n<\/ul>\n<p><img loading=\"lazy\" class=\"aligncenter size-full wp-image-112\" src=\"http:\/\/localhost\/applicatore\/wp-content\/uploads\/2017\/09\/governmental1.png\" alt=\"governmental1\" width=\"337\" height=\"48\" data-wp-pid=\"112\" srcset=\"https:\/\/applicature.com\/wp-content\/uploads\/2017\/09\/governmental1.png 337w, https:\/\/applicature.com\/wp-content\/uploads\/2017\/09\/governmental1-132x19.png 132w\" sizes=\"(max-width: 337px) 100vw, 337px\" \/><\/p>\n<ul>\n<li><span style=\"font-weight: 400;\">The EVM code obtained from this snippet of Solidity code clears one-by-one each location of the arrays. At a certain point, the list of participants of GovernMental grew so long, that clearing the arrays would have required more gas than the maximum allowed for a single transaction. From that point, any attempt to clear the arrays has failed. Let\u2019s review a simplified version of GovernMental, which shares some of the vulnerabilities of the original contract. <\/span><\/li>\n<\/ul>\n<p><img loading=\"lazy\" class=\"aligncenter size-full wp-image-113\" src=\"http:\/\/localhost\/applicatore\/wp-content\/uploads\/2017\/09\/governmental2.png\" alt=\"governmental2\" width=\"806\" height=\"386\" data-wp-pid=\"113\" srcset=\"https:\/\/applicature.com\/wp-content\/uploads\/2017\/09\/governmental2.png 806w, https:\/\/applicature.com\/wp-content\/uploads\/2017\/09\/governmental2-350x168.png 350w, https:\/\/applicature.com\/wp-content\/uploads\/2017\/09\/governmental2-500x239.png 500w, https:\/\/applicature.com\/wp-content\/uploads\/2017\/09\/governmental2-768x368.png 768w, https:\/\/applicature.com\/wp-content\/uploads\/2017\/09\/governmental2-600x287.png 600w, https:\/\/applicature.com\/wp-content\/uploads\/2017\/09\/governmental2-132x63.png 132w\" sizes=\"(max-width: 806px) 100vw, 806px\" \/><\/p>\n<ul>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">The contract Governmental gathers the investments of players in rounds, and it pays back only a winner per round, i.e. the player which is the last for at least one minute. To join the scheme, a player must invest at least half of the jackpot (line 14), whose amount grows upon each new investment. Anyone can invoke <\/span><strong>resetInvestment<\/strong><span style=\"font-weight: 400;\">, which pays the jackpot (half of the invested total) to the winner (line 24), and sends the remaining ether to the contract owner. The contract assumes that players are either users or contracts with empty fallback, so not to incur in out-of-gas exceptions during <\/span><strong>send<\/strong><span style=\"font-weight: 400;\">. <\/span><\/li>\n<\/ul>\n<p><span style=\"font-weight: 400;\">Let\u2019s have a look at 3 different attacks to simplified GovernMental:<\/span><\/p>\n<p><b>Attack #1<\/b><span style=\"font-weight: 400;\">. This attack exploits the vulnerabilities \u201cexception disorder\u201d and \u201cstack size limit\u201d, and is performed by the contract owner. His goal is not to pay the winner, so that the ether is kept by the contract, and redeemable by the owner at a later time. To fulfil this goal, the owner has to make the send at line <\/span><b>24<\/b><span style=\"font-weight: 400;\"> fail. His first step is to publish the following contract:<\/span><\/p>\n<p><img loading=\"lazy\" class=\"aligncenter size-full wp-image-114\" src=\"http:\/\/localhost\/applicatore\/wp-content\/uploads\/2017\/09\/governmental-attack.png\" alt=\"governmental-attack\" width=\"779\" height=\"126\" data-wp-pid=\"114\" srcset=\"https:\/\/applicature.com\/wp-content\/uploads\/2017\/09\/governmental-attack.png 779w, https:\/\/applicature.com\/wp-content\/uploads\/2017\/09\/governmental-attack-350x57.png 350w, https:\/\/applicature.com\/wp-content\/uploads\/2017\/09\/governmental-attack-500x81.png 500w, https:\/\/applicature.com\/wp-content\/uploads\/2017\/09\/governmental-attack-768x124.png 768w, https:\/\/applicature.com\/wp-content\/uploads\/2017\/09\/governmental-attack-600x97.png 600w, https:\/\/applicature.com\/wp-content\/uploads\/2017\/09\/governmental-attack-132x21.png 132w\" sizes=\"(max-width: 779px) 100vw, 779px\" \/><\/p>\n<p>Then, the owner calls Mallory\u2019s attack, which starts invoking herself recursively, making the stack grow. When the call stack reaches the depth of 1022, Mallory invokes Governmental\u2019s <strong>resetInvestment<\/strong>, which is then executed at stack size 1023. At this point, the <strong>send<\/strong> at line <strong>24<\/strong> fails, because of the call stack limit (the second send fails as well). Since GovernMental does not check the return code of<strong> send,<\/strong> the execution proceeds, resetting the contract state (lines <strong>27-29<\/strong>), and starting another round. The balance of the contract increases every time this attack is run, because the legit winner is not paid. To collect the ether, the owner only needs to wait for another round to terminate correctly.<\/p>\n<p><strong>Attack #2.<\/strong> In this case, the attacker is a miner, who also impersonates a player. Being a miner, she can choose not to include in blocks the transactions directed to GovernMental, except for her own, in order to be the last player in the round.<\/p>\n<p>Furthermore, the attacker can reorder the transactions, such that her one will appear first: indeed, by playing first and by choosing a suitable amount of ether to invest, she can prevent other players to join the scheme (line <strong>14<\/strong>), so resulting the last player in the round. This attack exploits the \u201cunpredictable state\u201d vulnerability, since players cannot be sure that, when they publish a transaction to join the scheme, the invested ether will be enough to make this operation succeed.<\/p>\n<p><strong>Attack #3<\/strong>. Also, in this case, the attacker is a miner impersonating a player. Assume that the attacker manages to join the scheme. To be the last player in the round for a minute, she can play with the block timestamp. More specifically, the attacker sets the timestamp of the new block so that it is at least one minute later the timestamp of the current block. As discussed along with the \u201ctime constraints\u201d vulnerability, there is a tolerance on the choice of the timestamp. If the attacker manages to publish the new block with the delayed timestamp, she will be the last player in the round, and will win the jackpot.<\/p>\n<p>&nbsp;<\/p>\n<h2>HackerGold Bug<strong><br \/>\n<\/strong><\/h2>\n<ul>\n<li><em>On January 4, 2017<\/em>, Zack Coburn submitted a vulnerability <span style=\"color: #e70f00;\"><a style=\"color: #e70f00;\" href=\"https:\/\/github.com\/ether-camp\/virtual-accelerator\/issues\/8\">report<\/a><\/span> on EtherCamp\u2019s implementation of the StandardToken contract.<\/li>\n<li><span style=\"color: #e70f00;\"><a style=\"color: #e70f00;\" href=\"https:\/\/github.com\/ether-camp\/virtual-accelerator\/blob\/master\/contracts\/StandardToken.sol\">StandardToken.sol contract<\/a><\/span> vulnerability was found in the <em>transferFrom()<\/em> function:<\/li>\n<\/ul>\n<p><img loading=\"lazy\" class=\"aligncenter size-full wp-image-115\" src=\"http:\/\/localhost\/applicatore\/wp-content\/uploads\/2017\/09\/hackergold-bug.png\" alt=\"hackergold-bug\" width=\"654\" height=\"90\" data-wp-pid=\"115\" srcset=\"https:\/\/applicature.com\/wp-content\/uploads\/2017\/09\/hackergold-bug.png 654w, https:\/\/applicature.com\/wp-content\/uploads\/2017\/09\/hackergold-bug-350x48.png 350w, https:\/\/applicature.com\/wp-content\/uploads\/2017\/09\/hackergold-bug-500x69.png 500w, https:\/\/applicature.com\/wp-content\/uploads\/2017\/09\/hackergold-bug-600x83.png 600w, https:\/\/applicature.com\/wp-content\/uploads\/2017\/09\/hackergold-bug-132x18.png 132w\" sizes=\"(max-width: 654px) 100vw, 654px\" \/><\/p>\n<ul>\n<li><strong>=+<\/strong> is a vulnerability. In this case, it should be <strong>+=<\/strong><\/li>\n<li>The effect is that 0x2ccc5a059a1bda4c3c3c594516e812a0b15799c9&#8217;s balance has been reduced from 5,000,000 HKG to 0.001 HKG.<\/li>\n<li>There was recommended a fix by Zack Coburn:\n<ul>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">Create a new HKG contract that fixes the bug and initializes all balances to what they were before the above transactions.<\/span><\/li>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">Any dapps that keep track of HKG balances internally (i.e., EtherDelta) need to be taken into account so that people who were holding balances inside such smart contracts get their tokens back.<\/span><\/li>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">Exchanges and token users will need to be notified about the transition to a new token contract.<\/span><\/li>\n<\/ul>\n<\/li>\n<\/ul>\n<ul>\n<li>This kind of bug is commonplace and was made due to a human rather than conceptual mistake. In order to prevent them, the developers should use the right tools for improving and correcting the product.<\/li>\n<li>A good solution for this problem to be further prevented is the SafeMath library. Any math operations should be checked and safe.<\/li>\n<\/ul>\n<p>&nbsp;<\/p>\n<h2>Bithumb<\/h2>\n<ul>\n<li><em>On June 29, 2017<\/em>, Bithumb exchange discovered a breach. The hackers managed to stole user data and money from Bithumb.<\/li>\n<li>The personal information of 31,800 Bithumb website users was grabbed. It included users\u2019 names, mobile phone numbers, and email addresses.<\/li>\n<li>The attack was committed not directly to the exchange\u2019s internal network and digital currency wallets, but to a personal computer belonging to an employee.<\/li>\n<li>After the credentials have been stolen the hacker started a process voice phishing, where the scammers call up victims one at a time and pose as representatives of Bithumb.<\/li>\n<li>The attacker posed as a Bithumb executive and asked the victims to give him an \u201cidentification number written on the letter from Bithumb.\u201d The number in question was the victim\u2019s One-Time Password, (OTP) which granted the attacker immediate access to ten million won, worth about US$8,700.<\/li>\n<li>The exchange posted a notice on their website stating that &#8220;compensation for personal information leakage cases has been decided.&#8221;<\/li>\n<\/ul>\n<p>&nbsp;<\/p>\n<h2>Classic Ether Wallet<\/h2>\n<ul>\n<li><em>On June 30, 2017<\/em>, the unknown hackers managed to get access to the domain Classic Ether Wallet. They used social engineering in order to mislead the employees of web host 1and1, pretending to be the real domain owners.<\/li>\n<li>Having gained control over the domain, the attackers changed the domains\u2019 settings and immediately began to direct users to their server.<\/li>\n<li>This attack is called phishing scam.<\/li>\n<li>The team immediately started <span style=\"color: #e70f00;\"><a style=\"color: #e70f00;\" href=\"https:\/\/twitter.com\/eth_classic\/status\/880597604559720448\">warning users over Twitter<\/a><\/span> to stop using the service<\/li>\n<li>The users even offered to arrange a DDoS attack on the domain to take it offline, as they found it the fastest way to stop criminals actions.<\/li>\n<li>But after a few hours later the Classic Ether Wallet managed to convince Cloudflare to place a phishing warning that will appear to anyone who would try to access the website. The issue was resolved.<\/li>\n<li>To stay safe the users could use My Ether Wallet and connect it to the ETC node.<\/li>\n<li>Reddit users shared a number of ETC addresses, where their funds were located. Thus, it was possible to calculate the sum in total stolen by the hackers. It was about $ 300,000.<\/li>\n<li>In order to reduce the chances to be detected the attackers split these funds among different wallets.<\/li>\n<\/ul>\n<p>&nbsp;<\/p>\n<h2>Augur REP Token<\/h2>\n<ul>\n<li>Augur\u2019s smart contracts are written in Serpent language<\/li>\n<li><em>On July\u00a013, 2017<\/em>, <span style=\"color: #e70f00;\"><a style=\"color: #e70f00;\" href=\"https:\/\/blog.zeppelin.solutions\/introducing-zeppelin-solutions-229130199a95\">Zeppelin Solutions<\/a><\/span>, a technology company focused on improving blockchain technology, security, and infrastructure, contacted the Augur team to privately notify them about 8 critical severity vulnerabilities in Serpent project.<\/li>\n<li>These critical bugs were found through an audit. The critical vulnerability was in the Serpent compiler\u2019s code, not in Augur\u2019s code.<\/li>\n<li>According to the <span style=\"color: #e70f00;\"><a style=\"color: #e70f00;\" href=\"https:\/\/blog.zeppelin.solutions\/augur-rep-token-critical-vulnerability-disclosure-3d8bdffd79d2\">Augur REP Token Critical Vulnerability Disclosure<\/a><\/span> a few days later, Zeppelin Solutions found one of those critical vulnerabilities affected the <span style=\"color: #e70f00;\"><a style=\"color: #e70f00;\" href=\"https:\/\/etherscan.io\/address\/0x48c80F1f4D53D5951e5D5438B54Cba84f29F32a5\">production REP token<\/a><\/span>. In a nutshell, an out-of-bounds write on the token\u2019s <strong>reputation<\/strong> array allowed an attacker to modify the <strong>creation<\/strong> timestamp, making it believe the crowdsale was still ongoing and disabling all token transfers. This critical severity vulnerability, if exploited, could have halted the whole REP economy, worth over $200 million.<\/li>\n<li>First, <span style=\"color: #e70f00;\"><a style=\"color: #e70f00;\" href=\"https:\/\/docs.google.com\/document\/d\/1_PqXuAkvgUAOG3jbBvaUvqN6W90eJ3N4IdTLNMRAijo\/edit#heading=h.lpzy76hy0nwt\">Serpent contracts can overwrite storage locations when accessing arrays out of bounds<\/a><\/span>. This means that if a Serpent contract attempts to access an array at a position greater than the array\u2019s length, Serpent won\u2019t stop it.<\/li>\n<li>Second, <span style=\"color: #e70f00;\"><a style=\"color: #e70f00;\" href=\"https:\/\/docs.google.com\/document\/d\/1_PqXuAkvgUAOG3jbBvaUvqN6W90eJ3N4IdTLNMRAijo\/edit#heading=h.o0pfi530wbgw\">the Serpent language is untyped<\/a><\/span>. It allows any operation to be performed on any data. Every value is a 256-bit sequence which can be used as an address, a contract, an integer, or an array. Moreover, it performs no checks on the data sent by a user on a transaction.<\/li>\n<li>ZS proposed a mitigation plan to reduce damages to the Augur project, which was accepted by their team. It included:\n<ul>\n<li>Writing a new REP smart contract in Solidity, based on <span style=\"color: #e70f00;\"><a style=\"color: #e70f00;\" href=\"https:\/\/openzeppelin.org\/\">OpenZeppelin<\/a>\u2019s<\/span> reusable components.<\/li>\n<li>Auditing the new REP token contract.<\/li>\n<li>Disclosing to exchanges and wallet providers on July 24, 2017, 25 hours before public disclosure.<\/li>\n<li>Deploying the new REP token contract to the Ethereum blockchain.<\/li>\n<li>Freezing the old REP token on July 25, 2017.<\/li>\n<li>Migrating the balances of the frozen REP token into the new REP token.<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n<h2>CoinDash<\/h2>\n<ul>\n<li>CoinDash, Israeli blockchain technology startup project, was hijacked by the hackers on July 17, 2017.<\/li>\n<li>In the middle of its ICO, the attackers withdrew $7 Million worth of Ether tokens. Investors sent 43438.455 Ether to the wrong address under the hackers\u2019 control.<\/li>\n<li>The attackers hacked CoinDash\u2019s site and changed their ETH for an ICO address to their own fund store.<\/li>\n<li>An estimated 43,500 ETH were redirected to the perpetrators\u2019 wallet address.<\/li>\n<li>CoinDash team claimed in a statement on its site that they were responsible to all the contributors and would provide tokens (CDTs) to people who sent ethereum to the fraudulent address.<\/li>\n<\/ul>\n<h2>Parity<\/h2>\n<ul>\n<li>On<em> July, 19 2017<strong>,<\/strong><\/em> there was a <span style=\"color: #e70f00;\"><a style=\"color: #e70f00;\" href=\"https:\/\/blog.parity.io\/security-alert-high-2\/\">security alert <\/a><\/span>on about a vulnerability in Parity Wallet\u2019s variant of the standard multi-signature contract.<\/li>\n<li>A vulnerability was discovered on the Parity Multisig Wallet using Parity client version 1.5 or later (that was released on the 19th of January 2017)<\/li>\n<li>The hacker managed to steal over 150,000 ETH (~$ 30M) from three multi-sig contracts. Here is the <span style=\"color: #e70f00;\"><a style=\"color: #e70f00;\" href=\"https:\/\/etherscan.io\/address\/0xb3764761e297d6f121e79c32a65829cd1ddb4d32#internaltx\">data<\/a><\/span>.<\/li>\n<li>The bug was ranked as a critical one in a specific multi-sig contract known as wallet.sol.<span style=\"color: #e70f00;\"><a style=\"color: #e70f00;\" href=\"https:\/\/etherscan.io\/address\/0x1dba1131000664b884a1ba238464159892252d3a\">White Hat hackers<\/a><\/span> rescued funds from vulnerable multisigs.<\/li>\n<li>Parity urged the users to immediately move their funds to other wallets such as <span style=\"color: #e70f00;\"><a style=\"color: #e70f00;\" href=\"https:\/\/www.myetherwallet.com\/\">MyEtherWallet<\/a><\/span>, a Geth node, or any single-user wallets created on Parity.<\/li>\n<li>According to Zeppelin Solutions, the attacker sent two transactions to each of the affected contracts: the <span style=\"color: #e70f00;\"><a style=\"color: #e70f00;\" href=\"https:\/\/etherscan.io\/tx\/0x9dbf0326a03a2a3719c27be4fa69aacc9857fd231a8d9dcaede4bb083def75ec\">first<\/a><\/span> to obtain exclusive ownership of the MultiSig, and the <span style=\"color: #e70f00;\"><a style=\"color: #e70f00;\" href=\"https:\/\/etherscan.io\/tx\/0xeef10fc5170f669b86c4cd0444882a96087221325f8bf2f55d6188633aa7be7c\">second<\/a><\/span> to move all of its funds.<\/li>\n<li>Let\u2019s consider the detailed description of the vulnerability analyzed by Open Zeppelin\u2019s team below. The source: <span style=\"color: #e70f00;\"><a style=\"color: #e70f00;\" href=\"https:\/\/blog.zeppelin.solutions\/on-the-parity-wallet-multisig-hack-405a8c12e8f7\">The Parity Wallet Hack Explained<\/a><\/span>:<\/li>\n<li>We can see that the first transaction is a call to initWallet (<span style=\"color: #e70f00;\"><a style=\"color: #e70f00;\" href=\"https:\/\/github.com\/paritytech\/parity\/blob\/4d08e7b0aec46443bf26547b17d10cb302672835\/js\/src\/contracts\/snippets\/enhanced-wallet.sol#L216\">line 216 of WalletLibrary<\/a><\/span>):<\/li>\n<\/ul>\n<p><img loading=\"lazy\" class=\"aligncenter wp-image-116\" src=\"http:\/\/localhost\/applicatore\/wp-content\/uploads\/2017\/09\/parity-attack1.png\" alt=\"parity-attack1\" width=\"622\" height=\"161\" data-wp-pid=\"116\" srcset=\"https:\/\/applicature.com\/wp-content\/uploads\/2017\/09\/parity-attack1.png 664w, https:\/\/applicature.com\/wp-content\/uploads\/2017\/09\/parity-attack1-350x91.png 350w, https:\/\/applicature.com\/wp-content\/uploads\/2017\/09\/parity-attack1-500x130.png 500w, https:\/\/applicature.com\/wp-content\/uploads\/2017\/09\/parity-attack1-600x155.png 600w, https:\/\/applicature.com\/wp-content\/uploads\/2017\/09\/parity-attack1-132x34.png 132w\" sizes=\"(max-width: 622px) 100vw, 622px\" \/><\/p>\n<ul>\n<li>This function was probably created as a way to extract the wallet\u2019s constructor logic into a separate library. This uses a similar idea to <span style=\"color: #e70f00;\"><a style=\"color: #e70f00;\" href=\"https:\/\/blog.zeppelin.solutions\/proxy-libraries-in-solidity-79fbe4b970fd\">the proxy libraries pattern<\/a><\/span>. The wallet contract forwards all unmatched function calls to the library using <strong>delegatecall<\/strong>, in <span style=\"color: #e70f00;\"><a style=\"color: #e70f00;\" href=\"https:\/\/github.com\/paritytech\/parity\/blob\/4d08e7b0aec46443bf26547b17d10cb302672835\/js\/src\/contracts\/snippets\/enhanced-wallet.sol#L424\">line 424 of Wallet<\/a><\/span>:<\/li>\n<\/ul>\n<p><img loading=\"lazy\" class=\"aligncenter size-full wp-image-117\" src=\"http:\/\/localhost\/applicatore\/wp-content\/uploads\/2017\/09\/parity-attack2.png\" alt=\"parity-attack2\" width=\"528\" height=\"181\" data-wp-pid=\"117\" srcset=\"https:\/\/applicature.com\/wp-content\/uploads\/2017\/09\/parity-attack2.png 528w, https:\/\/applicature.com\/wp-content\/uploads\/2017\/09\/parity-attack2-350x120.png 350w, https:\/\/applicature.com\/wp-content\/uploads\/2017\/09\/parity-attack2-500x171.png 500w, https:\/\/applicature.com\/wp-content\/uploads\/2017\/09\/parity-attack2-132x45.png 132w\" sizes=\"(max-width: 528px) 100vw, 528px\" \/><\/p>\n<ul>\n<li>This <strong>causes all public functions from the library to be callable by anyone<\/strong>, including <strong>initWallet<\/strong>, which can change the contract\u2019s owners. Unfortunately, <strong>initWallet<\/strong> has no checks to prevent an attacker from calling it after the contract was initialized. The attacker <span style=\"color: #e70f00;\"><a style=\"color: #e70f00;\" href=\"https:\/\/etherscan.io\/tx\/0x9dbf0326a03a2a3719c27be4fa69aacc9857fd231a8d9dcaede4bb083def75ec\">exploited this<\/a><\/span> and simply changed the contract\u2019s <strong>m_owners<\/strong> state variable to a list containing only their address, and requiring just one confirmation to execute any transaction:<\/li>\n<\/ul>\n<p><img loading=\"lazy\" class=\"aligncenter wp-image-118\" src=\"http:\/\/localhost\/applicatore\/wp-content\/uploads\/2017\/09\/parity-attack3.png\" alt=\"parity-attack3\" width=\"614\" height=\"198\" data-wp-pid=\"118\" srcset=\"https:\/\/applicature.com\/wp-content\/uploads\/2017\/09\/parity-attack3.png 685w, https:\/\/applicature.com\/wp-content\/uploads\/2017\/09\/parity-attack3-350x113.png 350w, https:\/\/applicature.com\/wp-content\/uploads\/2017\/09\/parity-attack3-500x161.png 500w, https:\/\/applicature.com\/wp-content\/uploads\/2017\/09\/parity-attack3-600x194.png 600w, https:\/\/applicature.com\/wp-content\/uploads\/2017\/09\/parity-attack3-132x43.png 132w\" sizes=\"(max-width: 614px) 100vw, 614px\" \/><\/p>\n<ul>\n<li>After that, it was just a matter of <span style=\"color: #e70f00;\"><a style=\"color: #e70f00;\" href=\"https:\/\/etherscan.io\/tx\/0xeef10fc5170f669b86c4cd0444882a96087221325f8bf2f55d6188633aa7be7c\">invoking the execute function<\/a><\/span> to send all funds to an account controlled by the attacker:<\/li>\n<\/ul>\n<p><img loading=\"lazy\" class=\"aligncenter wp-image-119\" src=\"http:\/\/localhost\/applicatore\/wp-content\/uploads\/2017\/09\/parity-attack4.png\" alt=\"parity-attack4\" width=\"610\" height=\"181\" data-wp-pid=\"119\" srcset=\"https:\/\/applicature.com\/wp-content\/uploads\/2017\/09\/parity-attack4.png 681w, https:\/\/applicature.com\/wp-content\/uploads\/2017\/09\/parity-attack4-350x104.png 350w, https:\/\/applicature.com\/wp-content\/uploads\/2017\/09\/parity-attack4-500x148.png 500w, https:\/\/applicature.com\/wp-content\/uploads\/2017\/09\/parity-attack4-600x178.png 600w, https:\/\/applicature.com\/wp-content\/uploads\/2017\/09\/parity-attack4-132x39.png 132w\" sizes=\"(max-width: 610px) 100vw, 610px\" \/><\/p>\n<ul>\n<li>This execution was automatically authorized, since the attacker was then the only owner of the multisig, effectively draining the contract of all its funds.<\/li>\n<\/ul>\n<p><strong>The solution. <\/strong>The attack could have been prevented either by not extracting the constructor logic into the library contract altogether or better by<em> not using\u00a0<\/em><em>delegatecall as a catch-all forwarding mechanism.<\/em> The recommended pattern is explicitly defining which library functions can be invoked externally on the wallet contract.<\/p>\n<p>It is important to note that the technique of abstracting logic into a shared library can be quite useful, though. It helps improve code reusability and reduces gas deployment costs. This attack, however, makes clear that a set of best practices and standards is needed in the Ethereum ecosystem to ensure that these coding patterns are implemented effectively and securely. Otherwise, the most innocent-looking bug can have disastrous consequences.<\/p>\n<h2><strong>Satoshi Pie<\/strong><\/h2>\n<ul>\n<li><em>On July\u00a019, 2017<\/em>, due to the vulnerability in the Ethereum wallet Parity, about 32.4% of the fund\u2019s assets or about $ 7M were withdrawn by the hackers from Satoshi Pie.<\/li>\n<li>Most of the funds were withdrawn within an hour. The project team managed to rescue the remaining funds sending them to a new wallet.<\/li>\n<li>The hack led to not identified accounts. However, it was carried out by the White Hats Group who created new wallets with multipoles with the same characteristics that have affected the vulnerability of wallets.<\/li>\n<li>The error was found in a separate contract with multipoles known as wallet.sol.<\/li>\n<li>Here is the history of the vulnerability solutions and recovery strategy (the source of information: <span style=\"color: #e70f00;\"><a style=\"color: #e70f00;\" href=\"https:\/\/steemit.com\/ethereum\/@hipster\/updates-satoshi-pie-ethereum-multisig-has-been-hacked\">https:\/\/steemit.com\/ethereum\/@hipster\/updates-satoshi-pie-ethereum-multisig-has-been-hacked<\/a><\/span> ):<\/li>\n<li>Estimation of vulnerable code based on contract version where White hats are sending values.<\/li>\n<\/ul>\n<p><img loading=\"lazy\" class=\"aligncenter size-full wp-image-120\" src=\"http:\/\/localhost\/applicatore\/wp-content\/uploads\/2017\/09\/satoshi-pie-vulnerability.png\" alt=\"satoshi-pie-vulnerability\" width=\"960\" height=\"410\" data-wp-pid=\"120\" srcset=\"https:\/\/applicature.com\/wp-content\/uploads\/2017\/09\/satoshi-pie-vulnerability.png 960w, https:\/\/applicature.com\/wp-content\/uploads\/2017\/09\/satoshi-pie-vulnerability-350x149.png 350w, https:\/\/applicature.com\/wp-content\/uploads\/2017\/09\/satoshi-pie-vulnerability-500x214.png 500w, https:\/\/applicature.com\/wp-content\/uploads\/2017\/09\/satoshi-pie-vulnerability-768x328.png 768w, https:\/\/applicature.com\/wp-content\/uploads\/2017\/09\/satoshi-pie-vulnerability-600x256.png 600w, https:\/\/applicature.com\/wp-content\/uploads\/2017\/09\/satoshi-pie-vulnerability-132x56.png 132w\" sizes=\"(max-width: 960px) 100vw, 960px\" \/><\/p>\n<p>8 lines updated<\/p>\n<ul>\n<li><span style=\"color: #e70f00;\"><a style=\"color: #e70f00;\" href=\"https:\/\/blog.parity.io\/security-alert-high-2\/\">Parity Blog<\/a><\/span> published a new version of contract in Parity <span style=\"color: #e70f00;\"><a style=\"color: #e70f00;\" href=\"https:\/\/github.com\/paritytech\/parity\/pull\/6103\">Github PR<\/a><\/span>.<\/li>\n<li>Future multi-sig wallets created by versions of Parity are secure. Fix in the code is <span style=\"color: #e70f00;\"><a style=\"color: #e70f00;\" href=\"https:\/\/github.com\/paritytech\/parity\/pull\/6103\">https:\/\/github.com\/paritytech\/parity\/pull\/6103<\/a><\/span> and the newly registered code is <span style=\"color: #e70f00;\"><a style=\"color: #e70f00;\" href=\"https:\/\/etherscan.io\/tx\/0x5f0846ccef8946d47f85715b7eea8fb69d3a9b9ef2d2b8abcf83983fb8d94f5f\">https:\/\/etherscan.io\/tx\/0x5f0846ccef8946d47f85715b7eea8fb69d3a9b9ef2d2b8abcf83983fb8d94f5f<\/a><\/span><\/li>\n<li>Recovery strategy was as follows:<\/li>\n<\/ul>\n<ol>\n<li>to provide best in breed blockchain asset management service.<\/li>\n<li>to change valuation cycle from 24 hours to 1 week for Satoshi Pie product.<\/li>\n<li>to implement a hard limit on deposits and withdrawals at 10 BTC for one transaction. Fewer transactions should go through the market.<\/li>\n<li>to move Ethereum holdings (if recovered) to <span style=\"color: #e70f00;\"><a style=\"color: #e70f00;\" href=\"https:\/\/github.com\/OpenZeppelin\/zeppelin-solidity\">Zeppelin smart contract framework<\/a><\/span>.<\/li>\n<li>to publish bug bounty program.<\/li>\n<li>to publish the new version of Satoshi Pie white paper<\/li>\n<\/ol>\n<ul>\n<li>The <span style=\"color: #e70f00;\"><a style=\"color: #e70f00;\" href=\"https:\/\/etherscan.io\/tx\/0xbeb8a365aca5bd7da514ea63d1b42650abfc4845b55b616209b7bbfe2f9ea839\">new contract<\/a><\/span> deployed by WHG <span style=\"color: #e70f00;\"><a style=\"color: #e70f00;\" href=\"https:\/\/www.reddit.com\/r\/ethereum\/comments\/6owvor\/the_replacement_multisig_wallets_have_been\/dklo6f8\/\">has been verified<\/a><\/span><\/li>\n<li>All values have been returned under SatoshiPie control.<\/li>\n<li>There is <span style=\"color: #e70f00;\"><a style=\"color: #e70f00;\" href=\"https:\/\/etherscan.io\/address\/0xc2216632beddb98f88e35b4e2cd8b9f140bb20cd\">the new contract<\/a><\/span>.<\/li>\n<\/ul>\n<h2>Veritaseum<\/h2>\n<ul>\n<li><em>On July 23, 2017<\/em>, <span style=\"color: #e70f00;\"><a style=\"color: #e70f00;\" href=\"http:\/\/veritas.veritaseum.com\/\">Veritaseum<\/a><\/span> was attacked by the hacker during an ICO who managed to redirect Veritas (VERI) tokens to an unknown digital wallet.<\/li>\n<li>Approximately $8.5 million worth of VERI tokens were stolen from the company.<\/li>\n<li>Veritaseum was under <span style=\"color: #e70f00;\"><a style=\"color: #e70f00;\" href=\"https:\/\/www.reddit.com\/r\/ethtrader\/comments\/6o1ys1\/veritaseum_wtf\/\">scrutiny by community members<\/a><\/span> who were skeptical of the company\u2019s security protocols that lacked <span style=\"color: #e70f00;\"><a style=\"color: #e70f00;\" href=\"http:\/\/info.ssl.com\/article.aspx?id=10241\">SSL<\/a><\/span>, or cryptographic protocols used to relay information across a computer network.<\/li>\n<li>In order to foul their trails, the hackers dumped the tokens into two separate wallets, then directed to other accounts.<\/li>\n<li>The hack is still being investigated, and so far there is limited information out there.<\/li>\n<\/ul>\n<p>It is of high importance to <a href=\"https:\/\/applicature.com\/blog\/blockchain-technology\/smart-contract-audits-all-you-need-to-know\" target=\"_blank\" rel=\"noopener noreferrer\">have your smart contract audited<\/a> and checked before deploying it. <a href=\"https:\/\/applicature.com\/shop\/auditing\/expert-recommendations-and-report-for-your-smart-contract\" target=\"_blank\" rel=\"noopener noreferrer\">Want your smart contract validated and solidified in a session with our experts<\/a>? Contact us to followed up with an explicit recommendations for your future reference.    \t<\/p>\n","protected":false},"excerpt":{"rendered":"<p>Smart Contract as a Safe and Secure Method of Conducting Transactions In this article, we gathered related material on Ethereum vulnerabilities and hacks from different sources. It will be useful both for blockchain developers of smart contacts and researchers. Providing you with the common errors and human mistakes in smart contracts we aim to make [&hellip;]<\/p>\n","protected":false},"author":5,"featured_media":4387,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[132],"tags":[195,207,252,255,260,280],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v14.7 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>- Applicature<\/title>\n<meta name=\"description\" content=\"Your smart contract needs to be totally reviewed and audited before been deployed. Look for high-quality recommendations for your smart-contract audit? Applicature offers you read through the article about the most famous hacks and smart-contract vulnerabilities.\" \/>\n<meta name=\"robots\" content=\"index, follow\" \/>\n<meta name=\"googlebot\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<meta name=\"bingbot\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/applicature.com\/blog\/blockchain-technology\/history-of-ethereum-security-vulnerabilities-hacks-and-their-fixes\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"- Applicature\" \/>\n<meta property=\"og:description\" content=\"Your smart contract needs to be totally reviewed and audited before been deployed. Look for high-quality recommendations for your smart-contract audit? Applicature offers you read through the article about the most famous hacks and smart-contract vulnerabilities.\" \/>\n<meta property=\"og:url\" content=\"https:\/\/applicature.com\/blog\/blockchain-technology\/history-of-ethereum-security-vulnerabilities-hacks-and-their-fixes\/\" \/>\n<meta property=\"og:site_name\" content=\"Applicature\" \/>\n<meta property=\"article:publisher\" content=\"https:\/\/www.facebook.com\/applicature\/\" \/>\n<meta property=\"article:published_time\" content=\"2017-09-27T21:23:49+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2019-08-01T13:00:14+00:00\" \/>\n<meta property=\"og:image\" content=\"https:\/\/applicature.com\/wp-content\/uploads\/2017\/09\/0-MmHiO6higWzLXhk-1.jpg\" \/>\n\t<meta property=\"og:image:width\" content=\"1536\" \/>\n\t<meta property=\"og:image:height\" content=\"1024\" \/>\n<meta property=\"fb:app_id\" content=\"156197445002802\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebSite\",\"@id\":\"https:\/\/applicature.com\/#website\",\"url\":\"https:\/\/applicature.com\/\",\"name\":\"Applicature\",\"description\":\"Blockchain \/ Smart Contracts \/ Decentralized Apps\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":\"https:\/\/applicature.com\/?s={search_term_string}\",\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/applicature.com\/blog\/blockchain-technology\/history-of-ethereum-security-vulnerabilities-hacks-and-their-fixes\/#primaryimage\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/applicature.com\/wp-content\/uploads\/2017\/09\/History-of-Ethereum-Security-Vulnerabilities-Hacks-and-Their-Fixes-1.jpg\",\"width\":1024,\"height\":538,\"caption\":\"History of Ethereum Security Vulnerabilities, Hacks and Their Fixes\"},{\"@type\":\"WebPage\",\"@id\":\"https:\/\/applicature.com\/blog\/blockchain-technology\/history-of-ethereum-security-vulnerabilities-hacks-and-their-fixes\/#webpage\",\"url\":\"https:\/\/applicature.com\/blog\/blockchain-technology\/history-of-ethereum-security-vulnerabilities-hacks-and-their-fixes\/\",\"name\":\"- Applicature\",\"isPartOf\":{\"@id\":\"https:\/\/applicature.com\/#website\"},\"primaryImageOfPage\":{\"@id\":\"https:\/\/applicature.com\/blog\/blockchain-technology\/history-of-ethereum-security-vulnerabilities-hacks-and-their-fixes\/#primaryimage\"},\"datePublished\":\"2017-09-27T21:23:49+00:00\",\"dateModified\":\"2019-08-01T13:00:14+00:00\",\"author\":{\"@id\":\"https:\/\/applicature.com\/#\/schema\/person\/eadbd177b4774859460945c4718dd53d\"},\"description\":\"Your smart contract needs to be totally reviewed and audited before been deployed. Look for high-quality recommendations for your smart-contract audit? Applicature offers you read through the article about the most famous hacks and smart-contract vulnerabilities.\",\"breadcrumb\":{\"@id\":\"https:\/\/applicature.com\/blog\/blockchain-technology\/history-of-ethereum-security-vulnerabilities-hacks-and-their-fixes\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/applicature.com\/blog\/blockchain-technology\/history-of-ethereum-security-vulnerabilities-hacks-and-their-fixes\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/applicature.com\/blog\/blockchain-technology\/history-of-ethereum-security-vulnerabilities-hacks-and-their-fixes\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"item\":{\"@type\":\"WebPage\",\"@id\":\"https:\/\/applicature.com\/blog\/blockchain-technology\/history-of-ethereum-security-vulnerabilities-hacks-and-their-fixes\/\",\"url\":\"https:\/\/applicature.com\/blog\/blockchain-technology\/history-of-ethereum-security-vulnerabilities-hacks-and-their-fixes\/\",\"name\":\"History of Ethereum Security Vulnerabilities, Hacks, and Their Fixes\"}}]},{\"@type\":[\"Person\"],\"@id\":\"https:\/\/applicature.com\/#\/schema\/person\/eadbd177b4774859460945c4718dd53d\",\"name\":\"Tanya Bahrynovska\",\"image\":{\"@type\":\"ImageObject\",\"@id\":\"https:\/\/applicature.com\/#personlogo\",\"inLanguage\":\"en-US\",\"url\":\"https:\/\/applicature.com\/wp-content\/uploads\/2019\/09\/2S3A1076.jpg\",\"caption\":\"Tanya Bahrynovska\"}}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","_links":{"self":[{"href":"https:\/\/applicature.com\/wp-json\/wp\/v2\/posts\/108"}],"collection":[{"href":"https:\/\/applicature.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/applicature.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/applicature.com\/wp-json\/wp\/v2\/users\/5"}],"replies":[{"embeddable":true,"href":"https:\/\/applicature.com\/wp-json\/wp\/v2\/comments?post=108"}],"version-history":[{"count":0,"href":"https:\/\/applicature.com\/wp-json\/wp\/v2\/posts\/108\/revisions"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/applicature.com\/wp-json\/wp\/v2\/media\/4387"}],"wp:attachment":[{"href":"https:\/\/applicature.com\/wp-json\/wp\/v2\/media?parent=108"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/applicature.com\/wp-json\/wp\/v2\/categories?post=108"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/applicature.com\/wp-json\/wp\/v2\/tags?post=108"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}